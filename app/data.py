# -*- coding: utf-8 -*-
"""data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q5v8XgoOtJg3_2-XZV9Kvg6xOfqiAzas
"""

# data.py
import pandas as pd

def carregar_dados():
    # Carrega o DataFrame principal (df) a partir da URL
    caminho = 'https://raw.githubusercontent.com/geovatatsuga/dashboard-e-previsao-churn/70f10acd9155f688744a6d0cfe3df480d42e06c9/DADOS/df_atualizado.csv'
    df = pd.read_csv(caminho)

    # Cálculos e métricas gerais
    total_clientes = len(df)
    novos_clientes = len(df[df['Status_do_Cliente'] == 'Novo Cliente'])
    total_churn = len(df[df['Status_do_Cliente'] == 'Churned'])
    taxa_churn_geral = round((total_churn / total_clientes) * 100, 2)

    # Cálculos por grupo, churn demográfico, por método de pagamento, por contrato, etc.
    contagem_churn_demografico = df[df['Status_do_Churn'] == 1].groupby('Gênero').size().reset_index(name='Total de Churn')

    taxa_churn_por_tipo_pagamento = df.groupby('Método_de_Pagamento')['Status_do_Churn'].mean() * 100
    taxa_churn_por_tipo_pagamento = taxa_churn_por_tipo_pagamento.round(2).sort_values(ascending=False)

    taxa_churn_por_contrato = df.groupby('Contrato')['Status_do_Churn'].mean() * 100
    taxa_churn_por_contrato = taxa_churn_por_contrato.round(2).sort_values(ascending=False)

    # Agrupamento por faixa etária (exemplo)
    # Aqui você pode colocar o processamento que fez para criar "total_cliente_grupo_idade" e "taxa_churn_grupo_idade"
    ordem_idade = ['< 20', '20-35', '36-50', '> 50']
    total_cliente_grupo_idade = df.groupby('Faixa_Idade').size().reset_index(name='Total_Clientes')
    total_cliente_grupo_idade['Faixa_Idade'] = pd.Categorical(total_cliente_grupo_idade['Faixa_Idade'],
                                                               categories=ordem_idade,
                                                               ordered=True)
    total_cliente_grupo_idade = total_cliente_grupo_idade.sort_values('Faixa_Idade')

    taxa_churn_grupo_idade = df.groupby('Faixa_Idade')['Status_do_Churn'].mean() * 100
    taxa_churn_grupo_idade = taxa_churn_grupo_idade.round(2)
    taxa_churn_grupo_idade.index = pd.Categorical(taxa_churn_grupo_idade.index,
                                                   categories=ordem_idade,
                                                   ordered=True)
    taxa_churn_grupo_idade = taxa_churn_grupo_idade.sort_index().round(2)

    # Carrega os dados de previsão
    caminho3 = 'https://raw.githubusercontent.com/geovatatsuga/dashboard-e-previsao-churn/main/DADOS/clientes_predictos.csv'
    clientes_Predicted = pd.read_csv(caminho3)

    # Cálculos para dados preditivos
    total_clientes_previsto = len(clientes_Predicted)
    contagem_pred_demografico = clientes_Predicted[clientes_Predicted['Churn_Predict'] == 1].groupby('Gênero').size().reset_index(name='Total de previstos')

    # Outras métricas (por método de pagamento, contrato, etc.) – você pode incluir as demais variáveis que calculou

    # Cria um dicionário com todas as variáveis que serão usadas
    dados = {
        'df': df,
        'total_clientes': total_clientes,
        'novos_clientes': novos_clientes,
        'total_churn': total_churn,
        'taxa_churn_geral': taxa_churn_geral,
        'contagem_churn_demografico': contagem_churn_demografico,
        'taxa_churn_por_tipo_pagamento': taxa_churn_por_tipo_pagamento,
        'taxa_churn_por_contrato': taxa_churn_por_contrato,
        'total_cliente_grupo_idade': total_cliente_grupo_idade,
        'taxa_churn_grupo_idade': taxa_churn_grupo_idade,
        'clientes_pred': clientes_Predicted,
        'total_clientes_previsto': total_clientes_previsto,
        # ... inclua outras variáveis conforme necessário
    }

    return dados