# -*- coding: utf-8 -*-
"""layout

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q5v8XgoOtJg3_2-XZV9Kvg6xOfqiAzas
"""

# layout.py
from dash import html, dcc
import dash_bootstrap_components as dbc
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objs as go

# CONSTANTES DE CORES (você pode ajustar conforme seu notebook)
COR_PRIMARIA = "#8e44ad"
COR_SECUNDARIA = "#e74c3c"
COR_SUCESSO = "#27ae60"
COR_ALERTA = "#c0392b"
COR_AVISO = "#f39c12"
FUNDO_ESCURO = "#1a1a1a"
TEXTO_CLARO = "#ffffff"
SLOT_CLARO = "#ffffff"

# Funções auxiliares para criar cards e gráficos

def criar_card(valor, titulo, cor_fundo, icone, card_id):
    return dbc.Card(
        dbc.CardBody([
            html.Div(className="d-flex align-items-center", children=[
                html.Div(className="icon-container me-3", children=[
                    html.I(className=icone, style={"fontSize": "2.5rem", "color": cor_fundo})
                ]),
                html.Div([
                    html.H2(valor, className="card-value mb-0", style={'color': cor_fundo}),
                    html.P(titulo, className="card-title mb-0", style={'color': '#555555'})
                ])
            ])
        ]),
        className="shadow-lg metric-card",
        style={
            'borderRadius': '15px',
            'backgroundColor': SLOT_CLARO,
            'transition': 'transform 0.2s',
            'margin': '0.5rem',
            'border': '1px solid #e0e0e0'
        },
        id=card_id
    )

def criar_grafico_combinado(total_df, taxa_series, titulo, eixo_x):
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    fig.add_trace(
        go.Bar(
            x=total_df.iloc[:, 0],
            y=total_df['Total_Clientes'],
            name='Total de Clientes',
            marker_color=COR_PRIMARIA,
            opacity=0.7,
            text=total_df['Total_Clientes'],
            textposition='outside',
            texttemplate='%{text:,}',
            textfont=dict(color=TEXTO_CLARO)
        ),
        secondary_y=False
    )
    fig.add_trace(
        go.Scatter(
            x=taxa_series.index,
            y=taxa_series.values,
            name='Taxa de Churn',
            line=dict(color='red', width=2),
            mode='lines+markers+text',
            marker=dict(size=6, symbol='diamond'),
            text=[f'{val:.1f}%' for val in taxa_series.values],
            textposition='top center',
            textfont=dict(color=TEXTO_CLARO)
        ),
        secondary_y=True
    )
    max_churn = max(taxa_series.values)
    max_tick = 10 * ((int(max_churn) // 10 + 1))
    fig.update_layout(
        title_text=titulo,
        template='plotly_dark',
        height=320,
        margin=dict(l=15, r=15, t=60, b=20),
        legend=dict(orientation="h", yanchor="bottom", y=1.02),
        xaxis_title=eixo_x,
        xaxis=dict(showgrid=False, color=TEXTO_CLARO),
        yaxis=dict(showgrid=False, color=TEXTO_CLARO),
        title_font=dict(size=18, family='Arial', color=TEXTO_CLARO),
        title_x=0.5,
        paper_bgcolor=FUNDO_ESCURO,
        plot_bgcolor=FUNDO_ESCURO
    )
    fig.update_yaxes(title_text="Clientes", secondary_y=False, showgrid=False)
    fig.update_yaxes(title_text="Churn (%)", secondary_y=True,
                   range=[0, max_tick], showgrid=False)
    return fig

def criar_grafico_horizontal(data_series, titulo, label_y, label_x, formato_percent=False):
    if formato_percent:
        text_template = '%{text:.1f}%'
        tick_format = '.1f%'
    else:
        text_template = '%{text:,}'
        tick_format = ','
    fig = px.bar(
        y=[str(i) for i in data_series.index],
        x=data_series.values,
        orientation='h',
        title=titulo,
        labels={'y': label_y, 'x': label_x},
        color_discrete_sequence=[COR_PRIMARIA]
    )
    fig.update_traces(
        text=data_series.values,
        textposition='outside',
        texttemplate=text_template,
        textfont=dict(color=TEXTO_CLARO)
    )
    fig.update_layout(
        template='plotly_dark',
        height=280,
        margin=dict(l=15, r=15, t=60, b=20),
        xaxis=dict(
            showgrid=False,
            tickformat=tick_format,
            range=[0, data_series.max() * 1.15],
            color=TEXTO_CLARO
        ),
        yaxis=dict(showgrid=False, color=TEXTO_CLARO),
        title_font=dict(size=16, family='Arial', color=TEXTO_CLARO),
        title_x=0.5,
        paper_bgcolor=FUNDO_ESCURO,
        plot_bgcolor=FUNDO_ESCURO
    )
    return fig

def criar_mapa_churn():
    # Exemplo: cria um mapa com dados fictícios a partir de um geojson
    import pandas as pd
    df_map = pd.DataFrame({
        'Estado': ['Uttar Pradesh', 'Tamil Nadu', 'Maharashtra'],
        'Churn': [629, 600, 504]
    })
    geojson_url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
    fig = px.choropleth_mapbox(
        df_map,
        geojson=geojson_url,
        locations='Estado',
        featureidkey='properties.ST_NM',
        color='Churn',
        color_continuous_scale='Viridis',
        range_color=(0, max(df_map['Churn'])),
        mapbox_style="carto-darkmatter",
        zoom=3.5,
        center={"lat": 22.9734, "lon": 78.6569},
        opacity=0.8,
        hover_data={'Estado': True, 'Churn': ':,.0f'},
        labels={'Churn': 'Casos de Churn'}
    )
    fig.update_layout(
        title={
            'text': "<b>Distribuição de Churn por Estado</b>",
            'font': {'size': 24, 'color': TEXTO_CLARO, 'family': 'Arial Black'},
            'x': 0.5,
            'y': 0.95,
            'xanchor': 'center',
            'yanchor': 'top',
            'pad': {'b': 20}
        },
        margin={"r":20,"t":80,"l":20,"b":20},
        paper_bgcolor=FUNDO_ESCURO,
        plot_bgcolor=FUNDO_ESCURO
    )
    return fig

def criar_layout(dados):
    """
    Função que cria o layout principal do dashboard.
    Utiliza as variáveis calculadas em data.py (dicionário "dados").
    """
    # Extraia as variáveis que você precisa do dicionário
    total_clientes = dados['total_clientes']
    novos_clientes = dados['novos_clientes']
    total_churn = dados['total_churn']
    taxa_churn_geral = dados['taxa_churn_geral']
    contagem_churn_demografico = dados['contagem_churn_demografico']
    total_cliente_grupo_idade = dados['total_cliente_grupo_idade']
    taxa_churn_grupo_idade = dados['taxa_churn_grupo_idade']
    clientes_pred = dados['clientes_pred']
    total_clientes_previsto = dados['total_clientes_previsto']
    # Você pode incluir outras variáveis conforme necessário

    # Crie os cards de métricas (exemplo)
    cabecalho_e_metricas = [
        dbc.Row(
            dbc.Col(
                html.Div([
                    html.Div([
                        html.I(className="fas fa-chart-line me-2",
                               style={"color": COR_PRIMARIA, "fontSize": "2.5rem"}),
                        html.H1("Dashboard de Churn", className="display-4 mb-0", style={'color': TEXTO_CLARO})
                    ], className="d-flex justify-content-center align-items-center"),
                    html.P("Análise de Retenção de Clientes", className="lead", style={'color': COR_PRIMARIA})
                ], className="text-center py-4"),
                width=12
            )
        ),
        dbc.Row([
            dbc.Col(criar_card(f"{total_clientes:,}", "Total Clientes", COR_PRIMARIA, "fas fa-users", "card-0"), width=3),
            dbc.Col(criar_card(f"{novos_clientes:,}", "Novos Clientes", COR_SUCESSO, "fas fa-user-plus", "card-1"), width=3),
            dbc.Col(criar_card(f"{total_churn:,}", "Clientes Perdidos", COR_ALERTA, "fas fa-user-minus", "card-2"), width=3),
            dbc.Col(criar_card(f"{taxa_churn_geral:.1f}%", "Taxa de Churn", COR_AVISO, "fas fa-percentage", "card-3"), width=3)
        ], className="g-4 mb-4")
    ]

    # Crie os gráficos (exemplos)
    fig_faixa_etaria = criar_grafico_combinado(total_cliente_grupo_idade, taxa_churn_grupo_idade, "Churn por Faixa Etária", "Faixa Etária")
    fig_mapa = criar_mapa_churn()

    # Crie o layout com abas (exemplo simplificado)
    layout = dbc.Container([
        dbc.Tabs([
            dbc.Tab(
                label="Dashboard Principal",
                children=[
                    *cabecalho_e_metricas,
                    dbc.Row([
                        dbc.Col(dcc.Graph(figure=fig_faixa_etaria), width=6),
                        dbc.Col(dcc.Graph(figure=fig_mapa), width=6)
                    ], className="mb-4")
                    # Você pode adicionar mais linhas e colunas com gráficos aqui…
                ],
                tabClassName="fw-bold"
            ),
            dbc.Tab(
                label="Análise Preditiva",
                children=[
                    dbc.Row([
                        dbc.Col(html.H1("Dashboard de Churn - Análise Preditiva",
                                          className='text-center mb-4',
                                          style={'color': COR_PRIMARIA, 'fontWeight': 'bold'}), width=12)
                    ]),
                    dbc.Row([
                        dbc.Col(
                            dbc.Card([
                                dbc.CardBody([
                                    html.H4("Total de Clientes Previstos", className="card-title", style={'color': COR_PRIMARIA}),
                                    html.H3(f"{total_clientes_previsto}", className="card-text text-center", style={'color': TEXTO_CLARO, 'fontWeight': 'bold'})
                                ])
                            ], style={'backgroundColor': FUNDO_ESCURO, 'border': f'2px solid {COR_PRIMARIA}'})
                        )
                    ], className='mb-4'),
                    # Outras seções e gráficos para a análise preditiva…
                ],
                tabClassName="fw-bold"
            )
        ])
    ], fluid=True, style={'backgroundColor': FUNDO_ESCURO, 'padding': '20px', 'minHeight': '100vh'})

    return layout